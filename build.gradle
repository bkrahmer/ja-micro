buildscript {
    dependencies {
        classpath 'org.apache.ant:ant:1.10.5'
        classpath 'com.google.protobuf:protobuf-gradle-plugin:0.8.6'
    }
}

plugins {
    id 'java'
    id 'idea'
    id 'jacoco'
    id 'maven-publish'
    id 'project-report'

    id 'net.researchgate.release' version '2.7.0'
    id 'com.github.ben-manes.versions' version '0.20.0'
    id 'com.jfrog.bintray' version '1.8.3'
    id 'com.google.protobuf' version '0.8.6'
}

group = 'com.sixt.service'

repositories {
    jcenter()
    mavenCentral()
    maven {
        url 'https://dl.bintray.com/palantir/releases' // docker-compose-rule is published on bintray
    }
    mavenLocal()
}

jar {
    manifest {
        attributes 'Service-Title': 'com.sixt.service.ja-micro',
                'Service-Version': version,
                'Service-Vendor': 'Sixt GmbH & Co. Autovermietung KG'
    }
}

bintray {
    user = System.getenv('bintray_user')
    key = System.getenv('bintray_api_key')
    publications = ['MyPublication']
    publish = true
    pkg {
        repo = 'ja-micro'
        name = project.name
        userOrg = 'sixt'
        licenses = ['Apache-2.0']
        vcsUrl = 'https://github.com/Sixt/ja-micro.git'
        version {
            name = project.version
        }
    }
}

def pomConfig = {
    licenses {
        license {
            name "The Apache Software License, Version 2.0"
            url "http://www.apache.org/licenses/LICENSE-2.0.txt"
            distribution "repo"
        }
    }
    developers {
        developer {
            name "Ja-micro developers"
            email "java-micro@sixt.com"
        }
    }
}

task sourcesJar(type: Jar) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

artifacts {
    archives sourcesJar
}

publishing {
    publications {
        MyPublication(MavenPublication) {
            from components.java
            groupId project.group
            artifactId project.name
            version project.version
            pom.withXml {
                def root = asNode()
                root.appendNode('url', 'https://github.com/Sixt/ja-micro')
                root.children().last() + pomConfig
            }
        }
    }
}

release {
    git {
        requireBranch = null
    }
}

afterReleaseBuild.dependsOn bintrayUpload

ext.versions = [
    'jetty'    : '9.4.11.v20180605',
    'protobuf' : '3.6.0',
    'guice'    : '4.2.0',
    'kafka'    : '1.1.1',
    'guava'    : '25.1-jre',
    'logback'  : '1.2.3',
    'slf4j'    : '1.7.25',
    'tracing'  : '0.31.0',
    'powermock': '1.7.4'
]

dependencies { //achtung: order does matter!

    //Commons utilities
    compile 'org.apache.commons:commons-lang3:3.7'
    compile 'commons-io:commons-io:2.6'
    compile "com.google.guava:guava:$versions.guava"

    //JSON
    compile 'com.google.code.gson:gson:2.8.5'

    //Guice dependency injection
    compile "com.google.inject:guice:$versions.guice"
    compile "com.google.inject.extensions:guice-servlet:$versions.guice"

    // Kubernetes
    runtime 'io.fabric8:kubernetes-client:1.4.35'

    //Protobuf
    compile "com.google.protobuf:protobuf-java:$versions.protobuf"
    compile "com.google.protobuf:protobuf-java-util:$versions.protobuf"

    //http client
    compile 'com.fasterxml.jackson.core:jackson-core:2.9.6'
    compile 'javax.servlet:javax.servlet-api:4.0.1'
    compile 'javax.validation:validation-api:2.0.1.Final'

    //metrics
    compile 'io.dropwizard.metrics:metrics-core:4.0.3'
    compile 'io.dropwizard.metrics:metrics-jmx:4.0.3'

    //tracing
    compile "io.opentracing:opentracing-api:$versions.tracing"
    compile "io.opentracing:opentracing-noop:$versions.tracing"

    //Classpath scanner
    compile 'io.github.lukehutch:fast-classpath-scanner:3.1.12'

    //Jetty
    compile "org.eclipse.jetty:jetty-client:$versions.jetty"
    compile "org.eclipse.jetty:jetty-server:$versions.jetty"
    compile "org.eclipse.jetty:jetty-servlet:$versions.jetty"
    compile "org.eclipse.jetty:jetty-http:$versions.jetty"
    compile "org.eclipse.jetty:jetty-util:$versions.jetty"
    compile "org.eclipse.jetty:jetty-jmx:$versions.jetty"

    //logging
    compile "ch.qos.logback:logback-core:$versions.logback"
    compile "ch.qos.logback:logback-classic:$versions.logback"
    compile 'net.logstash.logback:logstash-logback-encoder:5.1'
    compile "org.slf4j:slf4j-api:$versions.slf4j"

    //read manifests
    compile 'com.jcabi:jcabi-manifests:1.1'

    //migrate database schemas
    compile 'org.flywaydb:flyway-core:5.1.4'

    //kafka
    compile "org.apache.kafka:kafka-clients:$versions.kafka"
    compile 'net.jpountz.lz4:lz4:1.3.0'

    // service integration tests
    compile 'com.squareup.wire:wire-schema:2.2.0'

    // https://github.com/palantir/docker-compose-rule
    compile 'com.palantir.docker.compose:docker-compose-rule-junit4:0.34.0'

    compile 'org.nanohttpd:nanohttpd:2.3.1'

    //Testing
    testCompile 'junit:junit:4.12'
    testCompile "org.powermock:powermock-module-junit4:$versions.powermock"
    testCompile "org.powermock:powermock-api-mockito2:$versions.powermock"
    testCompile 'org.mockito:mockito-core:2.8.+'
    testCompile 'org.assertj:assertj-core:3.10.0'
    testCompile 'joda-time:joda-time:2.10'
    testCompile 'pl.pragmatists:JUnitParams:1.1.1'
}

protobuf {
    protoc {
        artifact = 'com.google.protobuf:protoc:3.2.0' //carefully controlled to keep compat with go code
    }
}

idea {
    module {
        sourceDirs += file("$protobuf.generatedFilesBaseDir/main/java");
        sourceDirs += file("$protobuf.generatedFilesBaseDir/test/java");
    }
}

test {
    useJUnit {
        excludeCategories "com.sixt.service.framework.IntegrationTest"
    }
}

jacocoTestReport {
    reports {
        xml.enabled true
    }
    executionData = fileTree('build/jacoco').include('**/*.exec')
}

task integrationTest(type: Test) {
    description "Run more heavyweight JUnit integration tests."
    group "verification"
    useJUnit {
        includeCategories "com.sixt.service.framework.IntegrationTest"
    }
    shouldRunAfter test
}

check.dependsOn integrationTest

compileJava {
    options.compilerArgs << "-Xlint:unchecked" << "-Xlint:deprecation"
}

build.dependsOn dependencyUpdates

dependencyUpdates.resolutionStrategy = {
  componentSelection { rules ->
    rules.all { ComponentSelection selection ->
      boolean rejected = ['alpha', 'beta', 'rc', 'cr', 'm'].any { qualifier ->
        selection.candidate.version ==~ /(?i).*[.-]${qualifier}[.\d-]*/
      }
      if (rejected) {
        selection.reject('Release candidate')
      }
    }
  }
}

